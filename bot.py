import logging
import dill
import numpy as np
from PIL import Image
import os
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
import faulthandler
from utils.image_processing import classify_image, analyze_style_and_emotion, generate_description

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from telegram.constants import ParseMode
IMG_SIZE = (224, 224)
CLASSIFICATION_MODEL_PATH = "models/mobilenet.pkl"
EMOTION_MODEL_PATH = "models/Artemis.pth"
BLIP_MODEL_PATH = "models/emotional_caption_model.dill"
BLIP_MODEL_ORIGINAL_PATH = "models/emotional_caption_model_original.dill"
giga = GigaChat(
    credentials="API_KEY",
    verify_ssl_certs=False,
    timeout=1200,
)
messages = [
    SystemMessage(
        content="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ —Å—Ñ–µ—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞. –ü–æ–º–æ–≥–∞–µ—à—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—É. –ò—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏–∑–±–µ–≥–∞—è –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π."
    )
]
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

PHOTO = range(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "üé® *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥!* üñºÔ∏è\n\n"
        "–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ:\n"
        "‚úÖ –ö—Ç–æ —Å–æ–∑–¥–∞–ª —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ‚Äî *—á–µ–ª–æ–≤–µ–∫* –∏–ª–∏ *–ò–ò*\n"
        "‚úÖ –ö–∞–∫–æ–π *—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å* –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"
        "‚úÖ –ö–∞–∫–∏–µ *—ç–º–æ—Ü–∏–∏* –ø–µ—Ä–µ–¥–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∞\n"
        "‚úÖ –ò –¥–∞–∂–µ —Å–æ–∑–¥–∞–º *—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ*!\n\n"
        "‚ú® *–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!*"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)
    return PHOTO

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.message.from_user
        photo_file = await update.message.photo[-1].get_file()
        image_path = "temp_image.jpg"
        await photo_file.download_to_drive(image_path)
        logger.info("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è %s: %s", user.id, f'{user.id}_photo.jpg')
        await update.message.reply_text(
            "‚ú® *–û—Ç–ª–∏—á–Ω–æ!* –î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üïí",
            parse_mode=ParseMode.HTML
        )

        classification_result = classify_image(image_path, CLASSIFICATION_MODEL_PATH)
        style_pred, emotion_pred = analyze_style_and_emotion(image_path, EMOTION_MODEL_PATH)
        description = generate_description(image_path, BLIP_MODEL_PATH, BLIP_MODEL_ORIGINAL_PATH)
        content = (
            f"–í–ê–ñ–ù–û: –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω—ã, –ø–æ–∑—ã –ª—é–¥–µ–π, –æ–¥–µ–∂–¥—É, –º–µ—Å—Ç–æ –∏ —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–µ–±–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã. \n"
            f"–û–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ç–æ—á–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ: —Å—Ç–∏–ª—å, —ç–º–æ—Ü–∏–∏ –∏ –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–∑–±–µ–≥–∞—è –¥–µ—Ç–∞–ª–µ–π –æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∏ –æ–¥–µ–∂–¥–µ.\n"
            f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ, –ª—É—á—à–µ –æ—Å—Ç–∞–≤—å —ç—Ç–æ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n"
            f"1. –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å: {style_pred}\n"
            f"2. –≠–º–æ—Ü–∏—è: {emotion_pred}\n"
            f"3. –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        messages.append(HumanMessage(content=content))
        res = giga.invoke(messages)
        messages.append(res)
        print(description)
        response = (
            "üé® <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n"
            f"1. <b>–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> {classification_result}\n"
            f"2. <b>–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å:</b> {style_pred}\n"
            f"3. <b>–≠–º–æ—Ü–∏–∏:</b> {emotion_pred}\n"
            f"4. <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {res.content}\n\n"
            "‚ú® <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!</b>\n\n"
            "üñºÔ∏è –•–æ—á–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ? –ò–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å"
        )
        await update.message.reply_text(response, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    return PHOTO

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    await update.message.reply_text(
        "‚ú® <b>–î–æ –≤—Å—Ç—Ä–µ—á–∏!</b> üñêÔ∏è\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

def main() -> None:
    token = "BOT_TOKEN"
    if not token:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    application = (
        Application.builder()
        .token(token)
        .build()
    )

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, photo)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    faulthandler.enable()
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    main()
